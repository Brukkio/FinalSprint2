import flask
from flask import jsonify
from flask import request

from sql import create_connection
from sql import execute_read_query
from sql import execute_query

import creds

# This line of code creates a Flask application object named 'app' and sets the value of its 'name' attribute to the name of the current module. The second line of code sets the 'DEBUG' configuration option to True, which allows the application to show detailed error messages in the browser if an error occurs.
app = flask.Flask(__name__)
app.config["DEBUG"] = True # This allows all to show newly formed errors in a browser


# These lines of code represent the credentials for the username and password.
username = "username"
password = "password"

@app.route('/login', methods=['POST'])
def login_creds():
   
    #These lines of code represent receiving login credentials from a request.
    request_data = request.get_json()
    entered_username = request_data['username']
    entered_password = request_data['password']

    # These line of code represent constant checking on wheter the password matches
    if entered_username == username and entered_password == password:
        return jsonify({"message": "Success!"}), 200
    else:
        return jsonify({"message": "Invalid entry"}), 401



# These line of code put some in local memory if something is there
snowboards = [
     
 ]

# These line of code represent the default url without any routing as GET request
@app.route('/', methods=['GET'])
def home():
    return "<h1> WELCOME to API class</h1>"


# API's for DATABASE access 


# CRUD FUNCTIONS FOR THE CAPTAIN TABLE
# GET Function
# These line of code create a new endpoint to recieve a single captain from DB : http://127.0.0.1:5000/api/captain?id=1
@app.route('/api/captain', methods=['GET'])
def api_users_by_id():
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: No ID can be provided!'
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql ="select * from captain"
    users = execute_read_query(conn, sql)
    results = []
    for user in users:
        if user['id']== id:
            results.append(user)
    return jsonify(results)

# All Captains are recieved here  
@app.route('/api/captain/all', methods=['GET'])
def api_users_all():
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql ="select * from captain"
    users = execute_read_query(conn, sql)
    return jsonify(users)


# POST Function
# These line of code add a captain as POST method
@app.route('/api/captain', methods=['POST'])
def api_add_users():
    request_data = request.get_json()
    if not all(key in request_data for key in ['firstname', 'lastname', 'rank', 'homeplanet']):
        return 'Error: Missing data in request!'
    firstname = request_data['firstname']
    lastname = request_data['lastname']
    rank = request_data['rank']
    homeplanet = request_data['homeplanet']

    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "insert into captain(firstname, lastname, `rank`, homeplanet) values ('%s','%s','%s','%s')" % (firstname, lastname, rank, homeplanet)

    execute_query(conn, sql)
    return 'Add captain request successful!'


# DELETE Function 
# This line of code implements the deletion of a captain using the HTTP DELETE method.
@app.route('/api/captain', methods=['DELETE'])
def api_delete_user_byID():
    request_data = request.get_json()
    idtodelete = request_data['id']
    
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "delete from captain where id = %s" % (idtodelete)
    execute_query(conn, sql)
        
    return "Delete request successful!"


# PUT Function 
# These lines of code represent pushing a captain using the HTTP method "PUT".
@app.route('/api/captain', methods=['PUT'])
def api_push_user_byID():
    request_data = request.get_json()
    idtodelete = request_data['id']
    firstname = request_data['firstname']
    lastname = request_data['lastname']
    rank = request_data['rank']
    homeplanet = request_data['homeplanet']
    
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = """UPDATE captain SET firstname = '%s', lastname = '%s', `rank` = '%s', homeplanet = '%s' WHERE id = %s""" % (firstname, lastname, rank, homeplanet, idtodelete)
    execute_query(conn, sql)    
    
    
    return "Update request successful!"



# CRUD FUNCTIONS FOR SPACESHIP TABLE

# GET Function 
# These line of code create a endpoint to get a single spaceship from DB : http://127.0.0.1:5000/api/spaceship?id=1
@app.route('/api/spaceship', methods=['GET'])
def api_spaceship_by_id():
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: No ID is provided!'
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql ="select * from spaceship"
    spaceships = execute_read_query(conn, sql)
    results = []
    for spaceship in spaceships:
        if spaceship['id']== id:
            spaceship['maxweight'] = float(spaceship['maxweight'])
            results.append(spaceship)
    return jsonify(results)

# These line of code gets all spaceships 
@app.route('/api/spaceship/all', methods=['GET'])
def api_spaceship_all():
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql ="select * from spaceship"
    spaceships = execute_read_query(conn, sql)
    for spaceship in spaceships:
        spaceship['maxweight'] = float(spaceship['maxweight'])
    return jsonify(spaceships)


# POST Function
# This function creates a new route for adding a spaceship using POST method. 
def api_add_spaceship():
    request_data = request.get_json()
    if not all(key in request_data for key in ['maxweight', 'captainid']):
        return 'Error: Missing data in request!'
    maxweight = request_data['maxweight']
    captainid = request_data['captainid']

    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "INSERT INTO spaceship(maxweight, captainid) VALUES (%s, %s)" % (maxweight, captainid)
    
    
    execute_query(conn, sql)
    return 'Add spaceship request successful!'


# PUT Function
# This code updates a spaceship's maximum weight and captain ID using a PUT request with the spaceship's ID as the identifier. 
def api_put_user_byID():
    request_data = request.get_json()
    idtoupdate = request_data['id']
    maxweight = request_data['maxweight']
    captainid = request_data['captainid']
    
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = """UPDATE captain SET maxweight = %s, captainid = %s WHERE id = %s""" % (maxweight, captainid, idtoupdate)
    execute_query(conn, sql)    
    
    
    return "Update request successful!"


# DELETE Function 
# These lines of code represent deleting a user using the DELETE HTTP method.
@app.route('/api/spaceship', methods=['DELETE'])
def api_delete_spaceship_byID():
    request_data = request.get_json()
    idtodelete = request_data['id']
    
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "delete from spaceship where id = %s" % (idtodelete)
    execute_query(conn, sql)
        
    return "Delete request successful!"


# CRUD FUNCTIONS FOR CARGO TABLE 
# These line of code create a endpoint to get a single cargo from DB : http://127.0.0.1:5000/api/cargo?id=1
@app.route('/api/cargo', methods=['GET'])
def api_cargo_by_id():
    if 'id' in request.args:
        id = int(request.args['id'])
    else:
        return 'Error: No ID is provided!'
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql ="select * from cargo"
    cargos = execute_read_query(conn, sql)
    for cargo in cargos:
        cargo['weight'] = float(cargo['weight'])
    results = []
    for cargo in cargos:
        if cargo['id']== id:
            results.append(cargo)
    return jsonify(results)

# Code defines handles GET requests for retrieving information about all cargo items. 
@app.route('/api/cargo/all', methods=['GET'])
def api_cargo_all():
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql ="select * from cargo"
    cargos = execute_read_query(conn, sql)
    for cargo in cargos:
        cargo['weight'] = float(cargo['weight'])
    return jsonify(cargos)


# POST Function
# These lines of code implement a POST method to add a new spaceship.
@app.route('/api/cargo', methods=['POST'])
def api_add_cargo():
    request_data = request.get_json()
    weight = request_data['weight']
    cargotype = request_data['cargotype']
    departure = request_data['departure']
    arrival = request_data['arrival']
    shipid = request_data['shipid']

    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "insert into cargo(weight, cargotype, departure, arrival, shipid) values ('%s','%s','%s','%s', '%s')" % (weight, cargotype, departure, arrival, shipid)

    execute_query(conn, sql)
    return 'Add cargo request successful!'


# PUT Function
# These line of code push a cargo with PUSH method
@app.route('/api/cargo', methods=['PUT'])
def api_put_cargo_byID():
    request_data = request.get_json()
    idtoupdate = request_data['id']
    weight = request_data['weight']
    cargotype = request_data['cargotype']
    departure = request_data['departure'] # When using POSTMAN to input arrival and departure dates, the values should be entered in the format YYYYMMDD, without any dashes or slashes.
    arrival = request_data['arrival']
    shipid = request_data['shipid']

    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = """UPDATE cargo SET weight = %s, cargotype = '%s', departure = %s, arrival = %s, shipid = %s  WHERE id = %s""" % (weight, cargotype, departure, arrival, shipid, idtoupdate)
    execute_query(conn, sql)
    return "Update request succesful" 


# DELETE Function
# These line of code delete a user with DELETE method
@app.route('/api/cargo', methods=['DELETE'])
def api_delete_cargo_byID():
    request_data = request.get_json()
    idtodelete = request_data['id']
    myCreds = creds.Creds()
    conn = create_connection(myCreds.connectionstring, myCreds.username, myCreds.passwd, myCreds.dataBase)
    sql = "delete from cargo where id = %s" % (idtodelete)
    execute_query(conn, sql)        
    
    return "Delete request successful!"

# SUCCESSFUL APP RUN 

app.run()
